using Dapper;
using FluentAssertions;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using Npgsql;
using Testcontainers.PostgreSql;
using Xunit.Abstractions;

namespace DapperBug.Tests;

public class BugTests(ITestOutputHelper testOutputHelper)
{
    const string ConnectionString =
        "Host=localhost;Database=test;Username=demo;Password=demo;";

    [Fact]
    public async Task CreateTables()
    {
        await CreateTableAndData();
        true.Should().BeTrue();
    }

    [Fact]
    public async Task RunAloneNotTogetherWithCreateTables()
    {
#pragma warning disable CS0618 // Type or member is obsolete
        NpgsqlConnection.GlobalTypeMapper.UseJsonNet();
#pragma warning restore CS0618 // Type or member is obsolete

        var task = async () =>
        {
            await using var conn = new NpgsqlConnection(ConnectionString);

            var items = await conn.QueryFirstOrDefaultAsync<string>(
                // "select \"Content\" from public.\"Posts\""
                "select content from public.posts"
            );

            testOutputHelper.WriteLine(JsonConvert.SerializeObject(items));
        };

        testOutputHelper.WriteLine("And...");
        await task.Should().NotThrowAsync();
    }

    private async Task CreateTableAndData()
    {
        // Apply migrations
        testOutputHelper.WriteLine("Creating and seeding data");

        var sql = """
            create table public.posts
            (
            postid  integer generated by default as identity
            constraint "PK_posts"
                primary key,
            title   text  not null,
            content jsonb not null
            );

            insert into public.posts (postid, title, content) values (1, 'title', '{"Prop1": "2", "Prop2": 2}');
            """;

        await using var conn = new NpgsqlConnection(ConnectionString);

        await conn.ExecuteAsync(sql);
        testOutputHelper.WriteLine("Created and seeded!");
    }
}
